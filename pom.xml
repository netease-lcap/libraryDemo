<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.9.RELEASE</version><!--与当前制品应用默认版本统一-->
    </parent>
    <groupId>com.netease</groupId>
    <artifactId>libraryDemo</artifactId>
    <!--平台上传过的包，在代码修改后版本号必须升级。因为平台中的包无法彻底删除。-->
    <version>1.0.5</version>


    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <!--本案例是本地系统引入nasl-metadata-collector-0.7.0.jar的方式。
        若把nasl-metadata-collector-0.7.0.jar安装到自己的maven仓库，
        注意修改artifactId和groupId的情况下，不要使用<scope>system</scope>，会在发布时造成依赖中断。
        不修改artifactId和groupId的情况下，nasl-metadata-maven-plugin会做特殊处理-->
        <dependency>
            <artifactId>nasl-metadata-collector</artifactId>
            <groupId>com.netease.lowcode</groupId>
            <version>0.7.0</version>
            <optional>true</optional>
            <scope>system</scope>
            <systemPath>${project.basedir}/jar/nasl-metadata-collector-0.7.0.jar</systemPath>
        </dependency>
        <!--制品应用使用Springboot框架，父应用引用了的包，为了防止版本冲突，scope可设置为provided-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.83</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>com.netease.lowcode</groupId>
                <artifactId>nasl-metadata-maven-plugin</artifactId>
                <version>1.3.0</version>
                <configuration>
                    <jarWithDependencies>false</jarWithDependencies>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>archive</goal>
                        </goals>
                    </execution>
                </executions>

            </plugin>
            <!--若存在特殊场景需要打全包（把所有依赖的包以源码的方式打到src中），则需要使用maven-assembly-plugin。
            并且需要把nasl-metadata-maven-plugin的<jarWithDependencies>false</jarWithDependencies>修改为true-->
            <!--            <plugin>-->
            <!--                <groupId>org.apache.maven.plugins</groupId>-->
            <!--                <artifactId>maven-assembly-plugin</artifactId>-->
            <!--                <version>3.3.0</version>-->
            <!--                <configuration>-->
            <!--                    <descriptorRefs>-->
            <!--                        <descriptorRef>jar-with-dependencies</descriptorRef>-->
            <!--                    </descriptorRefs>-->
            <!--                    <appendAssemblyId>false</appendAssemblyId>-->
            <!--                </configuration>-->
            <!--                <executions>-->
            <!--                    <execution>-->
            <!--                        <id>make-assembly</id>-->
            <!--                        <phase>package</phase>-->
            <!--                        <goals>-->
            <!--                            <goal>single</goal>-->
            <!--                        </goals>-->
            <!--                    </execution>-->
            <!--                </executions>-->
            <!--            </plugin>-->
        </plugins>
    </build>
</project>